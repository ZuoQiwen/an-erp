<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.springmvc.dao.MaterialDAO">
  <resultMap id="BaseResultMap" type="com.springmvc.dto.Material">
    <id column="material_id" jdbcType="INTEGER" property="materialId" />
    <result column="material_no" jdbcType="VARCHAR" property="materialNo" />
    <result column="material_name" jdbcType="VARCHAR" property="materialName" />
    <result column="unit" jdbcType="VARCHAR" property="unit" />
    <result column="category_id" jdbcType="INTEGER" property="categoryId" />
    <result column="spec" jdbcType="VARCHAR" property="spec" />
    <result column="cost" jdbcType="DECIMAL" property="cost" />
    <result column="remark" jdbcType="VARCHAR" property="remark" />
    <result column="create_at" jdbcType="TIMESTAMP" property="createAt" />
    <result column="create_by" jdbcType="INTEGER" property="createBy" />
    <result column="update_at" jdbcType="TIMESTAMP" property="updateAt" />
    <result column="update_by" jdbcType="INTEGER" property="updateBy" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <trim prefix="(" prefixOverrides="and" suffix=")">
        <foreach collection="oredCriteria" item="criteria" separator="or">
          <if test="criteria.valid">
            <trim prefix="(" prefixOverrides="and" suffix=")">
              <foreach collection="criteria.criteria" item="criterion">
                <choose>
                  <when test="criterion.noValue">
                    and ${criterion.condition}
                  </when>
                  <when test="criterion.singleValue">
                    and ${criterion.condition} #{criterion.value}
                  </when>
                  <when test="criterion.betweenValue">
                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                  </when>
                  <when test="criterion.listValue">
                    and ${criterion.condition}
                    <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                      #{listItem}
                    </foreach>
                  </when>
                </choose>
              </foreach>
            </trim>
          </if>
        </foreach>
        and 1 = 1
      </trim>
      <if test="categoryId != null">
        and CONCAT(',',get_category_ids(material.category_id,'material'),',') like CONCAT('%,',#{categoryId},',%')
      </if>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    material_id, material_no, material_name, unit, category_id, spec, cost, remark, create_at, 
    create_by, update_at, update_by
  </sql>
  <select id="selectByExample" parameterType="com.springmvc.pojo.MaterialQuery" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from material
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    <if test="limit != null">
      <if test="offset != null">
        limit ${offset}, ${limit}
      </if>
      <if test="offset == null">
        limit ${limit}
      </if>
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from material
    where material_id = #{materialId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from material
    where material_id = #{materialId,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.springmvc.pojo.MaterialQuery">
    delete from material
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.springmvc.dto.Material">
    <selectKey keyProperty="materialId" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into material (material_no, material_name, unit,
    category_id, spec, cost,
    remark, create_at, create_by,
    update_at, update_by)
    values (#{materialNo,jdbcType=VARCHAR}, #{materialName,jdbcType=VARCHAR}, #{unit,jdbcType=VARCHAR},
    #{categoryId,jdbcType=INTEGER}, #{spec,jdbcType=VARCHAR}, #{cost,jdbcType=DECIMAL},
    #{remark,jdbcType=VARCHAR}, #{createAt,jdbcType=TIMESTAMP}, #{createBy,jdbcType=INTEGER},
    #{updateAt,jdbcType=TIMESTAMP}, #{updateBy,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.springmvc.dto.Material">
    <selectKey keyProperty="materialId" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into material
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="materialNo != null">
        material_no,
      </if>
      <if test="materialName != null">
        material_name,
      </if>
      <if test="unit != null">
        unit,
      </if>
      <if test="categoryId != null">
        category_id,
      </if>
      <if test="spec != null">
        spec,
      </if>
      <if test="cost != null">
        cost,
      </if>
      <if test="remark != null">
        remark,
      </if>
      <if test="createAt != null">
        create_at,
      </if>
      <if test="createBy != null">
        create_by,
      </if>
      <if test="updateAt != null">
        update_at,
      </if>
      <if test="updateBy != null">
        update_by,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="materialNo != null">
        #{materialNo,jdbcType=VARCHAR},
      </if>
      <if test="materialName != null">
        #{materialName,jdbcType=VARCHAR},
      </if>
      <if test="unit != null">
        #{unit,jdbcType=VARCHAR},
      </if>
      <if test="categoryId != null">
        #{categoryId,jdbcType=INTEGER},
      </if>
      <if test="spec != null">
        #{spec,jdbcType=VARCHAR},
      </if>
      <if test="cost != null">
        #{cost,jdbcType=DECIMAL},
      </if>
      <if test="remark != null">
        #{remark,jdbcType=VARCHAR},
      </if>
      <if test="createAt != null">
        #{createAt,jdbcType=TIMESTAMP},
      </if>
      <if test="createBy != null">
        #{createBy,jdbcType=INTEGER},
      </if>
      <if test="updateAt != null">
        #{updateAt,jdbcType=TIMESTAMP},
      </if>
      <if test="updateBy != null">
        #{updateBy,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.springmvc.pojo.MaterialQuery" resultType="java.lang.Long">
    select count(*) from material
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update material
    <set>
      <if test="record.materialNo != null">
        material_no = #{record.materialNo,jdbcType=VARCHAR},
      </if>
      <if test="record.materialName != null">
        material_name = #{record.materialName,jdbcType=VARCHAR},
      </if>
      <if test="record.unit != null">
        unit = #{record.unit,jdbcType=VARCHAR},
      </if>
      <if test="record.categoryId != null">
        category_id = #{record.categoryId,jdbcType=INTEGER},
      </if>
      <if test="record.spec != null">
        spec = #{record.spec,jdbcType=VARCHAR},
      </if>
      <if test="record.cost != null">
        cost = #{record.cost,jdbcType=DECIMAL},
      </if>
      <if test="record.remark != null">
        remark = #{record.remark,jdbcType=VARCHAR},
      </if>
      <if test="record.createAt != null">
        create_at = #{record.createAt,jdbcType=TIMESTAMP},
      </if>
      <if test="record.createBy != null">
        create_by = #{record.createBy,jdbcType=INTEGER},
      </if>
      <if test="record.updateAt != null">
        update_at = #{record.updateAt,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updateBy != null">
        update_by = #{record.updateBy,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update material
    set material_no = #{record.materialNo,jdbcType=VARCHAR},
    material_name = #{record.materialName,jdbcType=VARCHAR},
    unit = #{record.unit,jdbcType=VARCHAR},
    category_id = #{record.categoryId,jdbcType=INTEGER},
    spec = #{record.spec,jdbcType=VARCHAR},
    cost = #{record.cost,jdbcType=DECIMAL},
    remark = #{record.remark,jdbcType=VARCHAR},
    create_at = #{record.createAt,jdbcType=TIMESTAMP},
    create_by = #{record.createBy,jdbcType=INTEGER},
    update_at = #{record.updateAt,jdbcType=TIMESTAMP},
    update_by = #{record.updateBy,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.springmvc.dto.Material">
    update material
    <set>
      <if test="materialNo != null">
        material_no = #{materialNo,jdbcType=VARCHAR},
      </if>
      <if test="materialName != null">
        material_name = #{materialName,jdbcType=VARCHAR},
      </if>
      <if test="unit != null">
        unit = #{unit,jdbcType=VARCHAR},
      </if>
      <if test="categoryId != null">
        category_id = #{categoryId,jdbcType=INTEGER},
      </if>
      <if test="spec != null">
        spec = #{spec,jdbcType=VARCHAR},
      </if>
      <if test="cost != null">
        cost = #{cost,jdbcType=DECIMAL},
      </if>
      <if test="remark != null">
        remark = #{remark,jdbcType=VARCHAR},
      </if>
      <if test="createAt != null">
        create_at = #{createAt,jdbcType=TIMESTAMP},
      </if>
      <if test="createBy != null">
        create_by = #{createBy,jdbcType=INTEGER},
      </if>
      <if test="updateAt != null">
        update_at = #{updateAt,jdbcType=TIMESTAMP},
      </if>
      <if test="updateBy != null">
        update_by = #{updateBy,jdbcType=INTEGER},
      </if>
    </set>
    where material_id = #{materialId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.springmvc.dto.Material">
    update material
    set material_no = #{materialNo,jdbcType=VARCHAR},
      material_name = #{materialName,jdbcType=VARCHAR},
      unit = #{unit,jdbcType=VARCHAR},
      category_id = #{categoryId,jdbcType=INTEGER},
      spec = #{spec,jdbcType=VARCHAR},
      cost = #{cost,jdbcType=DECIMAL},
      remark = #{remark,jdbcType=VARCHAR},
      create_at = #{createAt,jdbcType=TIMESTAMP},
      create_by = #{createBy,jdbcType=INTEGER},
      update_at = #{updateAt,jdbcType=TIMESTAMP},
      update_by = #{updateBy,jdbcType=INTEGER}
    where material_id = #{materialId,jdbcType=INTEGER}
  </update>

  <!-- 从material+material_category中获得内容 -->
  <resultMap id="ResultMapWithCName" type="com.springmvc.dto.Material">
    <id column="material_id" jdbcType="INTEGER" property="materialId" />
    <result column="material_no" jdbcType="VARCHAR" property="materialNo" />
    <result column="material_name" jdbcType="VARCHAR" property="materialName" />
    <result column="unit" jdbcType="VARCHAR" property="unit" />
    <result column="category_id" jdbcType="INTEGER" property="categoryId" />
    <result column="spec" jdbcType="VARCHAR" property="spec" />
    <result column="cost" jdbcType="DECIMAL" property="cost" />
    <result column="remark" jdbcType="VARCHAR" property="remark" />
    <result column="create_at" jdbcType="TIMESTAMP" property="createAt" />
    <result column="create_by" jdbcType="INTEGER" property="createBy" />
    <result column="update_at" jdbcType="TIMESTAMP" property="updateAt" />
    <result column="update_by" jdbcType="INTEGER" property="updateBy" />
    <result column="category_name" jdbcType="VARCHAR" property="categoryName" />
  </resultMap>
  <select id="selectWithCategoryNameByExample" parameterType="com.springmvc.pojo.MaterialQuery" resultMap="ResultMapWithCName">
    select
    <if test="distinct">
      distinct
    </if>
    material.material_id, material.material_no, material.material_name, material.unit, material.category_id,
    material.spec, material.cost, material.remark, material.create_at, material.create_by, material.update_at,
    material.update_by, material_category.category_name as category_name
    from material
    left join material_category on material.category_id = material_category.category_id
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    <if test="limit != null">
      <if test="offset != null">
        limit ${offset}, ${limit}
      </if>
      <if test="offset == null">
        limit ${limit}
      </if>
    </if>
  </select>

  <!-- List<MaterialStockRecord> selectWithStockByExample 方法的实现 -->
  <resultMap id="ResultMapWithStock" type="com.springmvc.dto.MaterialStockRecord">
    <id column="material_id" jdbcType="INTEGER" property="materialId"/>
    <result column="material_no" jdbcType="VARCHAR" property="materialNo"/>
    <result column="material_name" jdbcType="VARCHAR" property="materialName"/>
    <result column="unit" jdbcType="VARCHAR" property="unit"/>
    <result column="category_id" jdbcType="INTEGER" property="categoryId"/>
    <result column="spec" jdbcType="VARCHAR" property="spec"/>
    <result column="cost" jdbcType="DECIMAL" property="cost"/>
    <result column="remark" jdbcType="VARCHAR" property="remark"/>
    <result column="create_at" jdbcType="TIMESTAMP" property="createAt"/>
    <result column="create_by" jdbcType="INTEGER" property="createBy"/>
    <result column="update_at" jdbcType="TIMESTAMP" property="updateAt"/>
    <result column="update_by" jdbcType="INTEGER" property="updateBy"/>
    <result column="left_amount" jdbcType="INTEGER" property="leftAmount"/>
    <result column="total_amount" jdbcType="INTEGER" property="totalAmount"/>
    <result column="ordered_amount" jdbcType="INTEGER" property="orderedAmount"/>
  </resultMap>
  <select id="selectWithStockByExample" parameterType="com.springmvc.pojo.MaterialQuery" resultMap="ResultMapWithStock">
    SELECT material.*,IFNULL(C.total_amount,0) AS total_amount,IFNULL(D.ordered_amount,0) AS ordered_amount,
    IFNULL(C.total_amount,0)-IFNULL(D.ordered_amount,0) AS left_amount FROM material

    LEFT OUTER JOIN (
    SELECT material_id,sum(quantity) AS total_amount FROM (
    SELECT material_id, -quantity as quantity FROM material_outstock_bill_material LEFT JOIN material_outstock_bill
    on material_outstock_bill_material.bill_id=material_outstock_bill.bill_id
    where material_outstock_bill.bill_state=3
    UNION ALL
    SELECT material_id, quantity FROM material_instock_bill_material LEFT JOIN material_instock_bill
    on material_instock_bill_material.bill_id=material_instock_bill.bill_id
    where material_instock_bill.bill_state=3
    ) B
    GROUP BY material_id
    ) C ON material.material_id=C.material_id

    LEFT OUTER JOIN (
    SELECT material_id,sum(quantity) AS ordered_amount FROM material_outstock_bill_material LEFT JOIN material_outstock_bill
    on material_outstock_bill_material.bill_id=material_outstock_bill.bill_id
    where material_outstock_bill.bill_state IN (1,2)
    GROUP BY material_id
    ) D ON material.material_id=D.material_id
    <if test="_parameter != null">
      <include refid="Example_Where_Clause"/>
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    <if test="limit != null">
      <if test="offset != null">
        limit ${offset}, ${limit}
      </if>
      <if test="offset == null">
        limit ${limit}
      </if>
    </if>
  </select>
  <!-- MaterialStockRecord statisticsWithStockByExample 方法的实现 -->
  <select id="statisticsWithStockByExample" parameterType="com.springmvc.pojo.MaterialQuery" resultMap="ResultMapWithStock">
    SELECT IFNULL(SUM(IFNULL(C.total_amount,0)),0) AS total_amount,IFNULL(SUM(IFNULL(D.ordered_amount,0)),0) AS ordered_amount,
    IFNULL(SUM(IFNULL(C.total_amount,0)-IFNULL(D.ordered_amount,0)),0) AS left_amount FROM material

    LEFT OUTER JOIN (
    SELECT material_id,sum(quantity) AS total_amount FROM (
    SELECT material_id, -quantity as quantity FROM material_outstock_bill_material LEFT JOIN material_outstock_bill
    on material_outstock_bill_material.bill_id=material_outstock_bill.bill_id
    where material_outstock_bill.bill_state=3
    UNION ALL
    SELECT material_id, quantity FROM material_instock_bill_material LEFT JOIN material_instock_bill
    on material_instock_bill_material.bill_id=material_instock_bill.bill_id
    where material_instock_bill.bill_state=3
    ) B
    GROUP BY material_id
    ) C ON material.material_id=C.material_id

    LEFT OUTER JOIN (
    SELECT material_id,sum(quantity) AS ordered_amount FROM material_outstock_bill_material LEFT JOIN material_outstock_bill
    on material_outstock_bill_material.bill_id=material_outstock_bill.bill_id
    where material_outstock_bill.bill_state IN (1,2)
    GROUP BY material_id
    ) D ON material.material_id=D.material_id
    <if test="_parameter != null">
      <include refid="Example_Where_Clause"/>
    </if>
  </select>

  <!--List<MaterialLack> selectWithLackByExample(MaterialQuery example); 方法的实现 -->
  <resultMap id="ResultMapWithLack" type="com.springmvc.dto.MaterialLack">
    <id column="material_id" jdbcType="INTEGER" property="materialId"/>
    <result column="material_no" jdbcType="VARCHAR" property="materialNo"/>
    <result column="material_name" jdbcType="VARCHAR" property="materialName"/>
    <result column="use_draw" jdbcType="INTEGER" property="useDraw"/>
    <result column="total_stock" jdbcType="INTEGER" property="totalStock"/>
    <result column="use_outstock" jdbcType="INTEGER" property="useOutstock"/>
    <result column="unit" jdbcType="VARCHAR" property="unit"/>
  </resultMap>
  <select id="selectWithLackByExample" parameterType="com.springmvc.pojo.MaterialQuery" resultMap="ResultMapWithLack">
    SELECT material.*,IFNULL(C.total_amount,0) AS total_stock,IFNULL(C.total_amount,0)-IFNULL(D.ordered_amount,0) AS use_outstock,
    IFNULL(C.total_amount,0)-IFNULL(D.ordered_amount,0)-IFNULL(E.draw_amount,0) AS use_draw FROM material

    LEFT OUTER JOIN (
    SELECT material_id,sum(quantity) AS total_amount FROM (
    SELECT material_id, -quantity as quantity FROM material_outstock_bill_material LEFT JOIN material_outstock_bill
    on material_outstock_bill_material.bill_id=material_outstock_bill.bill_id
    where material_outstock_bill.bill_state=3
    UNION ALL
    SELECT material_id, quantity FROM material_instock_bill_material LEFT JOIN material_instock_bill
    on material_instock_bill_material.bill_id=material_instock_bill.bill_id
    where material_instock_bill.bill_state=3
    ) B
    GROUP BY material_id
    ) C ON material.material_id=C.material_id

    LEFT OUTER JOIN (
    SELECT material_id,sum(quantity) AS ordered_amount FROM material_outstock_bill_material LEFT JOIN material_outstock_bill
    on material_outstock_bill_material.bill_id=material_outstock_bill.bill_id
    where material_outstock_bill.bill_state IN (1,2)
    GROUP BY material_id
    ) D ON material.material_id=D.material_id

    LEFT OUTER JOIN (
    SELECT material_id,sum(quantity) AS draw_amount FROM draw_material_bill_material LEFT JOIN draw_material_bill
    on draw_material_bill_material.bill_id=draw_material_bill.bill_id
    where draw_material_bill.bill_id NOT IN (SELECT material_outstock_bill.related_bill FROM material_outstock_bill WHERE material_outstock_bill.material_whereabouts=1)
    GROUP BY material_id
    ) E ON material.material_id=E.material_id
    <if test="_parameter != null">
      <include refid="Example_Where_Clause"/>
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    <if test="limit != null">
      <if test="offset != null">
        limit ${offset}, ${limit}
      </if>
      <if test="offset == null">
        limit ${limit}
      </if>
    </if>
  </select>

  <!-- 搜索物料的数量 -->
  <resultMap id="ResultMapWithStockCost" type="com.springmvc.dto.MaterialStockCostRecord">
    <id column="material_id" jdbcType="INTEGER" property="materialId" />
    <result column="material_no" jdbcType="VARCHAR" property="materialNo" />
    <result column="material_name" jdbcType="VARCHAR" property="materialName" />
    <result column="unit" jdbcType="VARCHAR" property="unit" />
    <result column="category_id" jdbcType="INTEGER" property="categoryId" />
    <result column="spec" jdbcType="VARCHAR" property="spec" />
    <result column="cost" jdbcType="DECIMAL" property="cost" />
    <result column="remark" jdbcType="VARCHAR" property="remark" />
    <result column="create_at" jdbcType="TIMESTAMP" property="createAt" />
    <result column="create_by" jdbcType="INTEGER" property="createBy" />
    <result column="update_at" jdbcType="TIMESTAMP" property="updateAt" />
    <result column="update_by" jdbcType="INTEGER" property="updateBy" />
    <result column="total_amount" jdbcType="INTEGER" property="totalAmount"/>
    <result column="total_cost" jdbcType="INTEGER" property="totalCost"/>
  </resultMap>
  <select id="selectWithStockCostByExample" parameterType="com.springmvc.pojo.MaterialQuery" resultMap="ResultMapWithStockCost">
    SELECT material.*,IFNULL(C.real_stock,0) AS total_amount,IFNULL(C.real_stock,0)*material.cost AS total_cost FROM material

    LEFT OUTER JOIN (
    SELECT material_id,sum(quantity) AS real_stock FROM (
    SELECT material_id, -quantity as quantity FROM material_outstock_bill_material LEFT JOIN material_outstock_bill
    on material_outstock_bill_material.bill_id=material_outstock_bill.bill_id
    where material_outstock_bill.bill_state=3
    UNION ALL
    SELECT material_id, quantity FROM material_instock_bill_material LEFT JOIN material_instock_bill
    on material_instock_bill_material.bill_id=material_instock_bill.bill_id
    where material_instock_bill.bill_state=3
    ) B
    GROUP BY material_id
    ) C ON material.material_id=C.material_id
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    <if test="limit != null">
      <if test="offset != null">
        limit ${offset}, ${limit}
      </if>
      <if test="offset == null">
        limit ${limit}
      </if>
    </if>
  </select>
  <!-- 统计物料的数量 -->
  <select id="statisticsWithStockCostByExample" parameterType="com.springmvc.pojo.MaterialQuery" resultMap="ResultMapWithStockCost">
    SELECT IFNULL(SUM(IFNULL(C.total_amount,0)),0) AS total_amount,IFNULL(SUM(IFNULL(C.total_amount,0)*material.cost),0) AS total_cost FROM material

    LEFT OUTER JOIN (
    SELECT material_id,sum(quantity) AS total_amount FROM (
    SELECT material_id, -quantity as quantity FROM material_outstock_bill_material LEFT JOIN material_outstock_bill
    on material_outstock_bill_material.bill_id=material_outstock_bill.bill_id
    where material_outstock_bill.bill_state=3
    UNION ALL
    SELECT material_id, quantity FROM material_instock_bill_material LEFT JOIN material_instock_bill
    on material_instock_bill_material.bill_id=material_instock_bill.bill_id
    where material_instock_bill.bill_state=3
    ) B
    GROUP BY material_id
    ) C ON material.material_id=C.material_id
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
</mapper>